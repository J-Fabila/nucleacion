					20 de febrero del 2025
El objetivo es acoplarlo con mace y por lo tanto con nuestro potencial de MACE.
Análisis de archivos:
 * L1001.xyz :: parece ser la configuración inicial
 * ip_definition.dat :: parecen ser los parámetros de lammps por los pair_coeff
 * conf.data :: es el config file
 * inc_lib.xyz :: ¿Quizás sean las partículas con las que hace nucleación?
 * lammps_io.py :: clase lammps MD, input generator, corre colisiones
 * main.py :: Bueno, ¿que mas puede ser?
 * Nucleator.sub :: es el escript para lanzar el cálculo
 * particle.py :: clase particula heredada de ASE
 * runconfig.py :: configuration of the run
					11 de julio del 2025
Notas de Álex:
* Conf.data: In cond.data we specify all the necessary input for the nucleation growth to start. Like the cycles, temperature, desired stiochiometry. How many elements and their charges and if there are shells included. 
* Inc_lib.xyz: Here we specify the species that are going to be generated in every step. The process is number of atoms followed by charge and the probability and then xyz coordinates of the species. 
* Ip_definition: This file is where the potential is specified.
* L1001.xyz: This file is the seed particle. The first step. You specify the number of atoms, overall charge and the coordinates. 
* lammps_io.py: This is the main wrapper of the lammps and that you should probably change it to work with ASE. it creates the input in everycycle and automates the process for the outputs. 
* main.py: Tha main program that calls all the functions. 
* Nucleator.sub, Job sender, particle.py, runconfig.py and utilities.py: The utility functions of the code. 

Puntos que se pueden mejorar:
* el conf.data tiene un formato de texto poco robusto, se podría cambiar por un yaml
* la función que lee parámetros se podría cambiar simplemente por un yaml.load, tambien toda la estructura de parametros se puede cambiar en función de eso
* reorganizar el repo, es un poco caótico
* añadir variable de selección de calculadora

					1 de agosto del 2025
* lammps_io es una clase fabricada, no un paquete (importante)
* lammps_MD es un wrapper, no una función nativa de lammps
* lammps_io :: Lammps_MD :: run_collision
* Lammps_MD :: init :: run_command puede variar de sistema a sistema
  sería conveniente hacerlo general
* Lammps_MD :: init
               run_collision :: se llama así pero 
               read_final_structure
               clean_md
               
* Considero que hay 2 opciones: refactorizar el código y después
  integrar MACE o directamente cargarnos la parte lammps y hacerlo
  con MACE y ya si eso, después integrarlo todo
* ip definition tiene los parametros del campo de fuerzas de lammps


Lista de cambios: 
* Input conf.data -> conf.yaml : robust and flexible standard format that allows comments and more
  runconfig lee linea por linea en orden especifico
* naggs.py ahora es el principal
* En principio es posible usar LAMMPS directamente sin escribir en disco los archivos de entrada/salida
* Archivos que se quedan:
  particle.py
  incoming_part_library.py # esta dentro de particle, pero tendria que estar en su archivo aparte
  utilities.py: se cambia a utils, hay que tener cuidado porque parece que está alambrado a SiO
                solo contiene get_model_system(particle,incoming_particle)
  o sea que bien podríamos meter todo ésto en utils.py
* Podríamos añadir un logger guapo, aunque por pura estética, no sé hasta que punto haga falta
* lammps_io se tendria que reescribir pero yo ahora mismo la dejaría como está y nos podemos
  concentrar en MACE, ya si eso, después añadimos lammps también
* Añadiría más parámetros en conf.yaml para poner los de lammps aunque no los usemos ahora
  y los nuevos de MACE
* Me falta por entender que es el inc_lib
* Usar MACE únicamente como calculadora, tendríamos que cambiar la estructura del run_collision

* Yo reorganizaría:
  conf.yaml
  naggs.py
  src
     calculators
        LAMMPS
           inputs
           wrappers_lammps 
        MACE
     utils.py
     particle.py   
     otros.py
